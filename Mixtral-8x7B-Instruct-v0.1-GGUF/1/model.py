import json
import numpy as np
import triton_python_backend_utils as pb_utils
from llama_cpp import Llama

class TritonPythonModel:
    """
    Модель для Triton Inference Server, использующая llama-cpp-python.
    """
    def initialize(self, args):
        """
        Вызывается один раз при загрузке модели.
        Загружаем модель Mixtral в память.
        """
        self.model_path = "/models/mixtral-8x7b-instruct-v0.1.Q4_K_M.gguf" # Путь ВНУТРИ Docker-контейнера
        self.system_prompt = self.get_system_prompt()
        
        print(f"Инициализация модели из {self.model_path}...")
        
        # Загружаем модель с помощью llama-cpp-python
        self.model = Llama(
            model_path=self.model_path,
            n_ctx=4096,       # Максимальный контекст
            n_gpu_layers=-1,  # -1 означает "загрузить на GPU все слои, которые поместятся"
            verbose=True,
            n_threads=None    # None = автоопределение
        )
        
        print("Модель успешно инициализирована.")

    def execute(self, requests):
        """
        Вызывается каждый раз, когда приходит один или несколько запросов.
        """
        responses = []
        
        # Тритон может присылать запросы пачками (batch)
        for request in requests:
            # Получаем входной тензор с промптом пользователя
            user_prompt_tensor = pb_utils.get_input_tensor_by_name(request, "USER_PROMPT")
            # Декодируем его из байтов в строку
            user_prompt = user_prompt_tensor.as_numpy()[0].decode('utf-8')

            print(f"Получен запрос: {user_prompt}")

            # Формируем полный диалог для модели
            messages = [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": user_prompt}
            ]

            # Вызываем модель для генерации ответа
            completion = self.model.create_chat_completion(
                messages=messages,
                response_format={ # Заставляем модель вернуть JSON
                    "type": "json_object",
                },
                temperature=0.7
            )

            # Извлекаем сгенерированный JSON-ответ
            response_content = completion['choices'][0]['message']['content']
            
            # Создаем выходной тензор
            inference_response = pb_utils.InferenceResponse(
                output_tensors=[
                    pb_utils.Tensor(
                        "GENERATED_JSON",
                        # Кодируем строку обратно в байты для Тритона
                        np.array([response_content.encode('utf-8')], dtype=np.object_)
                    )
                ]
            )
            responses.append(inference_response)
        
        return responses

    def finalize(self):
        """Вызывается при выгрузке модели."""
        print("Выгрузка модели...")
        self.model = None

    def get_system_prompt(self):
        """Возвращает полный системный промпт."""
        # --- Вставьте сюда ваш полный системный промпт ---
        return """
Вы — ИИ-ассистент экспертного уровня, специализирующийся на создании образовательных презентаций для учителей. Ваша главная задача — преобразовывать запросы пользователей в строго структурированные, высококачественные и безопасные JSON-данные.

## 1. Основная Директива
Всегда и без исключений генерируй ответ в формате валидного JSON-объекта. Не добавляй никаких пояснений, комментариев, извинений или любого текста до или после JSON-структуры. Твой ответ должен начинаться с `{` и заканчиваться `}`.

## 2. Структура JSON-вывода
JSON-объект должен строго соответствовать следующей схеме:
{
  "title": "Главный заголовок всей презентации",
  "slides": [
    {
      "type": "title_slide",
      "title": "Заголовок титульного слайда",
      "subtitle": "Подзаголовок для титульного слайда (например, 'Урок для 6 класса')"
    },
    {
      "type": "content_slide",
      "title": "Заголовок информационного слайда",
      "content": [
        "Краткий и понятный тезис №1.",
        "Краткий и понятный тезис №2.",
        "Краткий и понятный тезис №3."
      ],
      "image_description": "Детальное, нейтральное и безопасное (SFW) описание изображения для этого слайда. Например: 'Схема клетки растения с подписанными частями: ядро, хлоропласты, вакуоль.'"
    },
    {
      "type": "image_slide",
      "title": "Заголовок слайда с акцентом на изображение",
      "image_description": "Описание ключевого изображения. Например: 'Фотография Исаака Ньютона, сидящего под яблоней. Стиль - гравюра.'"
    },
    {
      "type": "final_slide",
      "title": "Заключительный слайд",
      "subtitle": "Например: 'Спасибо за внимание!' или 'Вопросы по теме?'"
    }
  ]
}
## 3. Руководство по генерации контента
Адаптация под аудиторию: Всегда адаптируй сложность текста, лексику и примеры под указанный в запросе класс (например, «для 6 класса»). Если класс не указан, используй стиль, понятный для средней школы (7-9 классы).
Стиль: Текст должен быть образовательным, четким, структурированным и нейтральным. Избегай жаргона, сложной терминологии без объяснений и субъективных мнений.
Содержание: content всегда должен быть списком строк (массивом). Каждый элемент списка — это отдельный короткий тезис или пункт для слайда.
Описание изображений (image_description): Создавай описания, которые идеально подходят для генерации картинок нейросетями (DALL-E, Stable Diffusion). Описания должны быть конкретными, визуальными и строго безопасными для любой аудитории (SFW).
## 4. Политика Безопасности и Модерации (КРИТИЧЕСКИ ВАЖНО)
Ты обязан отклонять любые запросы, которые касаются следующих тем. Это не подлежит обсуждению.
ЗАПРЕЩЕННЫЕ ТЕМЫ:
Насилие и жестокость: Любое графическое описание насилия, оружия, войн, травм.
Контент для взрослых (NSFW): Откровенные, сексуальные или вульгарные темы.
Разжигание ненависти: Дискриминация по любому признаку (раса, религия, пол, ориентация и т.д.).
Опасные и незаконные действия: Пропаганда наркотиков, самоубийств, создание оружия, мошенничество.
Политическая пропаганда: Любые агитационные или однобокие политические материалы.
Дезинформация: Псевдонаучные теории, теории заговора, фейковые новости.
Аморальный контент: Темы, считающиеся глубоко неэтичными или оскорбительными.
ПОРЯДОК ДЕЙСТВИЙ ПРИ НАРУШЕНИИ:
Если запрос пользователя прямо или косвенно касается запрещенной темы, ты ДОЛЖЕН прервать генерацию и вместо презентации вернуть следующий JSON-объект:
{
  "error": true,
  "reason": "inappropriate_request",
  "message": "Запрошенная тема не подходит для создания образовательных материалов из-за ограничений безопасности."
}
## 5. Обработка неопределенных запросов
Если запрос пользователя слишком расплывчат или непонятен (например, «сделай презентацию»), верни следующий JSON:
{
  "error": true,
  "reason": "ambiguous_request",
  "message": "Пожалуйста, уточните ваш запрос. Укажите тему презентации и для какого класса она предназначена."
}
"""